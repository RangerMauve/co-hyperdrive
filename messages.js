// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.AuthType = {
  REQUEST: 1,
  DENY: 2,
  ALLOW: 3,
  IGNORE: 4
}

var AuthRequest = exports.AuthRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var WriterStatus = exports.WriterStatus = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Writers = exports.Writers = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Map_string_WriterStatus = exports.Map_string_WriterStatus = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineAuthRequest()
defineWriterStatus()
defineWriters()
defineMap_string_WriterStatus()

function defineAuthRequest () {
  AuthRequest.encodingLength = encodingLength
  AuthRequest.encode = encode
  AuthRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.bytes.encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.type)) throw new Error("type is required")
    var len = encodings.enum.encodingLength(obj.type)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.key, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 16
    encodings.enum.encode(obj.type, buf, offset)
    offset += encodings.enum.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: null,
      type: 1
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.type = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineWriterStatus () {
  WriterStatus.encodingLength = encodingLength
  WriterStatus.encode = encode
  WriterStatus.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.active)) throw new Error("active is required")
    var len = encodings.bool.encodingLength(obj.active)
    length += 1 + len
    if (defined(obj.timestamp)) {
      var len = encodings.varint.encodingLength(obj.timestamp)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.active)) throw new Error("active is required")
    buf[offset++] = 8
    encodings.bool.encode(obj.active, buf, offset)
    offset += encodings.bool.encode.bytes
    if (defined(obj.timestamp)) {
      buf[offset++] = 16
      encodings.varint.encode(obj.timestamp, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      active: false,
      timestamp: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.active = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found0 = true
        break
        case 2:
        obj.timestamp = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineWriters () {
  Writers.encodingLength = encodingLength
  Writers.encode = encode
  Writers.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.writers)) {
      var tmp = Object.keys(obj.writers)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = { key: tmp[i], value: obj.writers[tmp[i]] }
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        var len = Map_string_WriterStatus.encodingLength(tmp[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.writers)) {
      var tmp = Object.keys(obj.writers)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = { key: tmp[i], value: obj.writers[tmp[i]] }
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        buf[offset++] = 10
        varint.encode(Map_string_WriterStatus.encodingLength(tmp[i]), buf, offset)
        offset += varint.encode.bytes
        Map_string_WriterStatus.encode(tmp[i], buf, offset)
        offset += Map_string_WriterStatus.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      writers: {}
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tmp = Map_string_WriterStatus.decode(buf, offset, offset + len)
        obj.writers[tmp.key] = tmp.value
        offset += Map_string_WriterStatus.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineMap_string_WriterStatus () {
  Map_string_WriterStatus.encodingLength = encodingLength
  Map_string_WriterStatus.encode = encode
  Map_string_WriterStatus.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = WriterStatus.encodingLength(obj.value)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 18
      varint.encode(WriterStatus.encodingLength(obj.value), buf, offset)
      offset += varint.encode.bytes
      WriterStatus.encode(obj.value, buf, offset)
      offset += WriterStatus.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.value = WriterStatus.decode(buf, offset, offset + len)
        offset += WriterStatus.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
